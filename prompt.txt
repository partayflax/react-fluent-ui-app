Create a React application with the following specifications:

1. Setup base configuration:
   - Use React 18
   - Use TypeScript
   - Use Webpack for bundling
   - Use Fluent UI v9 for components
   - Configure GitHub OAuth authentication

2. Required dependencies in package.json:
```json
{
  "name": "react-fluent-ui-app",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "start": "webpack serve --mode development",
    "build": "webpack --mode production",
    "test": "jest"
  },
  "dependencies": {
    "@fluentui/react-components": "^9.45.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.18.0"
  },
  "devDependencies": {
    "@babel/core": "^7.23.0",
    "@babel/preset-env": "^7.22.20",
    "@babel/preset-react": "^7.22.15",
    "@babel/preset-typescript": "^7.23.0",
    "@types/react": "^18.2.33",
    "@types/react-dom": "^18.2.14",
    "babel-loader": "^9.1.3",
    "css-loader": "^6.8.1",
    "dotenv-webpack": "^8.0.1",
    "html-webpack-plugin": "^5.5.3",
    "style-loader": "^3.3.3",
    "typescript": "^5.2.2",
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1"
  }
}
```

3. Create webpack.config.js:
```javascript
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const Dotenv = require('dotenv-webpack');

module.exports = {
  entry: './src/index.tsx',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
    clean: true,
    publicPath: '/',
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  module: {
    rules: [
      {
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,
        use: 'babel-loader',
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './public/index.html',
    }),
    new Dotenv({
      systemvars: true,
    }),
  ],
  devServer: {
    static: {
      directory: path.join(__dirname, 'public'),
    },
    port: 3000,
    hot: true,
    open: true,
    historyApiFallback: true,
    proxy: {
      '/api': {
        target: 'https://github.com',
        changeOrigin: true,
        pathRewrite: {
          '^/api': '',
        },
        secure: false,
      },
    },
  },
};
```

4. Create .babelrc:
```json
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript"
  ]
}
```

5. Create tsconfig.json:
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}
```

6. Create public/index.html:
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>React Fluent UI App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
```

7. Create src/auth/AuthContext.tsx:
```typescript
import React, { createContext, useContext, useState, useEffect } from 'react';

interface AuthContextType {
  isAuthenticated: boolean;
  user: any;
  login: () => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<any>(null);

  const login = () => {
    const clientId = process.env.GITHUB_CLIENT_ID;
    const redirectUri = window.location.origin + '/auth/callback';
    const scope = 'user:email';
    
    if (!clientId) {
      console.error('GitHub OAuth configuration is missing');
      return;
    }

    window.location.href = `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scope}`;
  };

  const logout = () => {
    setIsAuthenticated(false);
    setUser(null);
    localStorage.removeItem('github_token');
  };

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');

    if (code) {
      const exchangeCodeForToken = async () => {
        try {
          const clientId = process.env.GITHUB_CLIENT_ID;
          const clientSecret = process.env.GITHUB_CLIENT_SECRET;
          const redirectUri = window.location.origin + '/auth/callback';

          if (!clientId || !clientSecret) {
            console.error('GitHub OAuth configuration is missing');
            return;
          }

          const response = await fetch('/api/login/oauth/access_token', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Accept: 'application/json',
            },
            body: JSON.stringify({
              client_id: clientId,
              client_secret: clientSecret,
              code,
              redirect_uri: redirectUri,
            }),
          });

          const data = await response.json();
          if (data.access_token) {
            localStorage.setItem('github_token', data.access_token);
            setIsAuthenticated(true);
            
            // Fetch user data
            const userResponse = await fetch('https://api.github.com/user', {
              headers: {
                Authorization: `Bearer ${data.access_token}`,
              },
            });
            const userData = await userResponse.json();
            setUser(userData);
          }
        } catch (error) {
          console.error('Error exchanging code for token:', error);
        }
      };

      exchangeCodeForToken();
    }
  }, []);

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
```

8. Create src/components/LoginButton.tsx:
```typescript
import React from 'react';
import { Button } from '@fluentui/react-components';
import { useAuth } from '../auth/AuthContext';

const LoginButton: React.FC = () => {
  const { isAuthenticated, login, logout, user } = useAuth();

  return (
    <div>
      {isAuthenticated ? (
        <div>
          <p>Welcome, {user?.login}</p>
          <Button appearance="primary" onClick={logout}>
            Logout
          </Button>
        </div>
      ) : (
        <Button appearance="primary" onClick={login}>
          Login with GitHub
        </Button>
      )}
    </div>
  );
};

export default LoginButton;
```

9. Create src/components/AuthCallback.tsx:
```typescript
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../auth/AuthContext';

const AuthCallback: React.FC = () => {
  const navigate = useNavigate();
  const { isAuthenticated, user } = useAuth();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        if (isAuthenticated && user) {
          navigate('/');
        }
      } catch (err) {
        setError('Authentication failed. Please try again.');
        console.error('Authentication error:', err);
      }
    };

    checkAuth();
  }, [isAuthenticated, user, navigate]);

  if (error) {
    return (
      <div style={{ 
        display: 'flex', 
        flexDirection: 'column',
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        gap: '20px'
      }}>
        <h2 style={{ color: 'red' }}>{error}</h2>
        <button 
          onClick={() => navigate('/')}
          style={{
            padding: '10px 20px',
            fontSize: '16px',
            cursor: 'pointer'
          }}
        >
          Return to Home
        </button>
      </div>
    );
  }

  return (
    <div style={{ 
      display: 'flex', 
      justifyContent: 'center', 
      alignItems: 'center', 
      height: '100vh' 
    }}>
      <h2>Processing authentication...</h2>
    </div>
  );
};

export default AuthCallback;
```

10. Create src/App.tsx:
```typescript
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { FluentProvider, webLightTheme, makeStyles } from '@fluentui/react-components';
import { AuthProvider } from './auth/AuthContext';
import LoginButton from './components/LoginButton';
import AuthCallback from './components/AuthCallback';

const useStyles = makeStyles({
  root: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: '100vh',
    gap: '20px',
  },
});

const App: React.FC = () => {
  const styles = useStyles();

  return (
    <Router>
      <AuthProvider>
        <FluentProvider theme={webLightTheme}>
          <Routes>
            <Route
              path="/"
              element={
                <div className={styles.root}>
                  <h1>Welcome to React Fluent UI App</h1>
                  <LoginButton />
                </div>
              }
            />
            <Route path="/auth/callback" element={<AuthCallback />} />
          </Routes>
        </FluentProvider>
      </AuthProvider>
    </Router>
  );
};

export default App;
```

11. Create src/index.tsx:
```typescript
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

const container = document.getElementById('root');
if (!container) throw new Error('Failed to find the root element');
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

12. Create src/index.css:
```css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
```

13. Create .env: